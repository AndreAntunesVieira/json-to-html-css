"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const valuePattern=/("(\\u[a-zA-Z0-9]{4}|\\[^u]|[^\\"])*"(\s*:)?|\b(true|false|null)\b|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?)/g;function jsonToHtml(e){const t=exports.jsonToHtmlCode(e);return getJsonToHtmlTemplate(t)}exports.default=jsonToHtml,exports.jsonToHtmlCode=e=>{let t=JSON.stringify(e,void 0,1).replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(valuePattern,valueReplacer).replace(/\n/g,"<br />").replace(/  /g,"&nbsp;&nbsp;");if(/^{/.test(t)&&/}$/.test(t)){const e=t.substr(1,t.length-2).replace("<br />","");t=t.substr(0,1)+`<div style="margin-left: 8px">${e}</div>`+t.substr(-1)}return`<code>${t}</code>`},exports.styles={darcula:"\ncode {word-spacing: 2px;background: #2c2c2c;color: #AAA;font-size:16px; display: block;}\ncode pre {outline: 1px solid #ccc;padding: 5px;margin: 5px;}\ncode .string {color: #6b8753;}\ncode .number {color: #6997C0;}\ncode .boolean {color: #cd7a1c;font-weight: bold;}\ncode .null {color: #cd7a1c;font-weight: bold;}\ncode .key {color: #9776ae;font-weight: bold;}"};const valueReplacer=e=>'<span class="'+getClassName(e)+'">'+e+"</span>",getClassName=e=>/^"/.test(e)&&/:$/.test(e)?"key":/^"/.test(e)?"string":/true|false/.test(e)?"boolean":/null/.test(e)?"null":"number",getJsonToHtmlTemplate=e=>`\n<html>\n<head>\n<style>\nbody{margin: 0;background: #2c2c2c;color: #AAA;font-size:16px;min-height: 100vh; }\n${exports.styles.darcula}\n</style>\n</head>\n<body>\n${e}\n</body>\n</html>`;